{"version":3,"sources":["reducers/BookReducer.js","contexts/BookContextProvider.jsx","components/BookList/_BookList/BookForm.jsx","components/BookList/_BookList/BookDetails.jsx","components/BookList/BookList.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","type","paramObj","title","book","author","id","Date","now","filter","localStorage","setItem","JSON","stringify","setTimeout","removeItem","alert","BookContext","createContext","BookContextProvider","props","useReducer","parse","getItem","books","dispatch","useEffect","Provider","value","children","BookForm","useState","setTitle","setAuthor","useContext","onSubmit","e","preventDefault","substr","placeholder","onChange","currentTarget","required","BookDetails","myButton","current","onmouseenter","parentNode","style","onmouseleave","useRef","className","ref","onClick","BookList","sort","a","b","map","key","Navbar","Fragment","length","bind","Boolean","textAlign","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e9889ac.chunk.js","sourcesContent":["\r\n\r\n\r\nexport const bookReducer = (state, {type,...paramObj}) => {\r\n\r\n    if (type === \"addBook\") {\r\n\r\n        return [...state, { title: paramObj.book.title, author: paramObj.book.author, id: Date.now() }]\r\n\r\n    }\r\n    else if (type === \"removeBook\") {\r\n\r\n        return state.filter((book => {\r\n            return book.id !== paramObj.id\r\n        }))\r\n    }\r\n    // else if (paramObj.type === \"getLocalStorage\") {\r\n    //     return [...state, ...JSON.parse(localStorage.getItem(\"books\"))]\r\n    // }\r\n    else if (type === \"setLocalStorage\") {\r\n\r\n        localStorage.setItem(\"books\", JSON.stringify(state))\r\n        return state\r\n    }\r\n\r\n    else if (type === \"removeLocalStorage\") {\r\n\r\n        setTimeout(function () {\r\n            localStorage.removeItem(\"books\")\r\n            alert(\"lcoal storage removed !\")\r\n        }, 0)\r\n\r\n\r\n        return []\r\n    }\r\n    else {\r\n        return state\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // if (paramObj.type = \"addBook\") {\r\n\r\n\r\n    //     return [...state, { title: paramObj.book.title||\"dymmy\", author: paramObj.book.author||\"dymmy\", id: Date.now() }]\r\n    // }\r\n    // else if (paramObj.type = \"removeBook\") {\r\n\r\n\r\n\r\n    //     return state.filter((book) => {\r\n\r\n    //         return book.id !== paramObj.id\r\n\r\n    //     })\r\n    // }\r\n    // else {\r\n    //     return state\r\n    // }\r\n}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { bookReducer } from '../reducers/BookReducer';\r\n\r\n\r\nexport const BookContext = createContext()\r\n\r\n\r\nconst BookContextProvider = (props) => {\r\n\r\n\r\n\r\n\r\n    const [books, dispatch] = useReducer(\r\n        bookReducer,\r\n        JSON.parse(localStorage.getItem(\"books\")) ||\r\n        [{ title: \"Welcome to use\", author: Date(), id: Date.now() }]\r\n\r\n        // [{ title: \"name of the wind\", author: \"Patrick rothfuss\", id: 1 },\r\n        // { title: \"the way of kings\", author: \"brande sandera\", id: 2 },\r\n        // { title: \"the final empire\", author: \"jillk huss\", id: 3 },\r\n        // { title: \"the hero of ages\", author: \"snelck dussbd\", id: 4 }\r\n        // ]\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch({ type: \"setLocalStorage\" })\r\n\r\n        // localStorage.setItem(\"books\", JSON.stringify(books))\r\n\r\n    }, [books])\r\n\r\n\r\n    return (\r\n\r\n        <BookContext.Provider value={{ books, dispatch }}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n\r\n    );\r\n}\r\n\r\nexport default BookContextProvider;\r\n\r\n\r\n\r\n\r\n// const [books, dispatch] = useReducer(bookReducer, [\r\n//     { title: \"name of the wind\", author: \"Patrick rothfuss\", id: 1 },\r\n//     { title: \"the way of kings\", author: \"brande sandera\", id: 2 },\r\n//     { title: \"the final empire\", author: \"jillk huss\", id: 3 },\r\n//     { title: \"the hero of ages\", author: \"snelck dussbd\", id: 4 }\r\n// ])\r\n\r\n","import React, { useState, useContext } from 'react';\r\nimport { BookContext } from '../../../contexts/BookContextProvider';\r\n\r\n\r\n\r\n\r\n\r\nconst BookForm = (props) => {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [author, setAuthor] = useState(\"\")\r\n\r\n    const { dispatch } = useContext(BookContext)\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n      \r\n       \r\n            dispatch({ type: \"addBook\", book: { title, author:author||Date().substr(0,24), id: Date.now() } })\r\n        \r\n\r\n\r\n\r\n\r\n          setTitle(\"\")\r\n          setAuthor(\"\")\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input placeholder=\"title\" type=\"text\" value={title} onChange={(e) => { setTitle(e.currentTarget.value) }} required></input>\r\n            <input placeholder=\"author\" type=\"text\" value={author} onChange={(e) => { setAuthor(e.currentTarget.value) }} ></input>\r\n\r\n            <input type=\"submit\" value=\"Add Book\" />\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nexport default BookForm;","import React, { useContext, useRef,useEffect /*useState*/ } from 'react';\r\nimport { BookContext } from '../../../contexts/BookContextProvider'\r\n\r\n\r\n\r\nconst BookDetails = ({ book }) => {\r\n\r\n   \r\n   \r\n    useEffect(function(){\r\n\r\n     \r\n         myButton.current.onmouseenter = (e) => { e.currentTarget.parentNode.style = \"opacity:0.7;  text-decoration: line-through;\" }\r\n         myButton.current.onmouseleave=(e) => { e.currentTarget.parentNode.style = \"opacity:1;  text-decoration: none;\" }\r\n\r\n     },[]);\r\n  \r\n     \r\n\r\n\r\n\r\n\r\n    const myButton = useRef()\r\n    const { dispatch } = useContext(BookContext)\r\n\r\n    // const [{useOut,mouseEnter,mouseOut}, setPanalStyle] = useState({\r\n\r\n    //     useOut:true,\r\n    //     mouseEnter: {\r\n    //         opacity: 0.7,\r\n    //         textDecoration: \"line-through\"\r\n    //     },\r\n\r\n    //     mouseOut: {\r\n    //         opacity: 1,\r\n    //         textDecoration: \"none\"\r\n    //     }\r\n    // })\r\n\r\n\r\n\r\n\r\n    return (\r\n    \r\n           \r\n            <li>\r\n             \r\n                <button className=\"deleteBtn\" \r\n                    \r\n                    ref={myButton}\r\n\r\n                    onClick={() => { dispatch({ type: \"removeBook\", id: book.id }) }}\r\n\r\n                    // onMouseEnter={(e) => { setPanalStyle({useOut:!useOut,mouseEnter,mouseOut}) }}\r\n                    // onMouseOut={(e) => { setPanalStyle({useOut:!useOut,mouseEnter,mouseOut}) }}\r\n\r\n                 //    onMouseEnter={(e) => { e.currentTarget.parentNode.style = \"opacity:0.7;  text-decoration: line-through;\" }}\r\n                 //    onMouseOut={(e) => { e.currentTarget.parentNode.style = \"opacity:1;  text-decoration: none;\" }}\r\n\r\n                >delete</button>\r\n\r\n\r\n                <div className=\"title\">{book.title}  </div>\r\n\r\n\r\n\r\n                <div className=\"author\">{book.author} </div>\r\n\r\n\r\n            </li>\r\n\r\n        \r\n\r\n\r\n    );\r\n}\r\n\r\nexport default BookDetails;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../../contexts/BookContextProvider'\r\nimport BookForm from './_BookList/BookForm';\r\nimport BookDetails from './_BookList/BookDetails';\r\n\r\nconst BookList = (props) => {\r\n\r\n    const { books } = useContext(BookContext)\r\n\r\n    books.sort(\r\n        function(a,b){\r\n            if(a.id>=b.id){\r\n                return -1\r\n            }\r\n            else{\r\n                return 1\r\n            }\r\n\r\n        }\r\n    )\r\n    \r\n\r\n\r\n    return (\r\n\r\n        <div className=\"book-list\">\r\n            <ul >\r\n                {\r\n                    books.map(book => {\r\n                        return (        \r\n                         <BookDetails {...{ key:book.id,book }}/*book={book}*/ />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n\r\n            <BookForm/>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default BookList;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContextProvider'\r\n\r\n\r\nconst Navbar = (props) => {\r\n\r\n    const { books,dispatch } = useContext(BookContext);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <nav className=\"navbar\">\r\n                <h1>Ninja Reading List...</h1>\r\n                <p>Currently you have {books.length} books to get through...</p>\r\n\r\n              <div>  <input type=\"submit\" value=\"Default\" onClick={dispatch.bind(null,{type:\"removeLocalStorage\"})}/></div>\r\n\r\n\r\n            \r\n            </nav>\r\n            {!Boolean(books.length) ? <p style={{ textAlign: \"center\" }}>No books to read, Hello free time :)</p> : <p></p>}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n\n\nimport BookContextProvider from './contexts/BookContextProvider';\nimport BookList from './components/BookList/BookList';\nimport Navbar from './components/Navbar';\nimport Form from './components/Form';\n\n\n\nconst App = (props) => {\n  return (\n\n    <div className=\"App\">\n\n      {/* <Form /> */}\n\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n      </BookContextProvider>\n\n \n\n    </div>\n\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//import \"bootstrap/dist/css/bootstrap.css\";\nimport './index.css';\n\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n\n\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}